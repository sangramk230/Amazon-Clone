package com.amazon.controller;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.amazon.entity.Availableproduct;
import com.amazon.service.UserAvailableProductService;


@RestController
@RequestMapping("api/userProduct/")
public class UserAvailableProductController {

	@Autowired
	private UserAvailableProductService userAvailableProductService;

	@PostMapping("save")
	public ResponseEntity<String> saveAvailableProduct(@RequestParam String email, @RequestParam String name,
			@RequestParam String brand, @RequestParam Double price, @RequestParam String category,
			@RequestParam("image") MultipartFile imageFile) {
		try {
			Availableproduct availableProduct = new Availableproduct();
			availableProduct.setEmail(email);
			availableProduct.setName(name);
			availableProduct.setBrand(brand);
			availableProduct.setPrice(price);
			availableProduct.setCategory(category);
			availableProduct.setImage(imageFile.getBytes());

			boolean isSaved = userAvailableProductService.saveAvailableProduct(availableProduct);
			return new ResponseEntity<>(isSaved ? "Product saved successfully." : "Failed to save product.",
					HttpStatus.OK);
		} catch (IOException e) {
			e.printStackTrace();
			return new ResponseEntity<>("Error saving product.", HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@GetMapping("get/{id}")
	public ResponseEntity<AvailableProduct> getAvailableProduct(@PathVariable Long id) {
		AvailableProduct availableProduct = userAvailableProductService.getAvailableProduct(id);
		return availableProduct != null ? new ResponseEntity<>(availableProduct, HttpStatus.OK)
				: new ResponseEntity<>(HttpStatus.NOT_FOUND);
	}
}
